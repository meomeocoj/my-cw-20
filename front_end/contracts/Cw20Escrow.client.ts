/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import {
  CosmWasmClient,
  SigningCosmWasmClient,
  ExecuteResult,
} from '@cosmjs/cosmwasm-stargate'
import { StdFee } from '@cosmjs/amino'
import {
  InstantiateMsg,
  ExecuteMsg,
  Uint128,
  Binary,
  CreateMsg,
  Cw20ReceiveMsg,
  QueryMsg,
  DetailResponse,
  Cw20Coin,
  Coin,
  ListResponse,
} from './Cw20Escrow.types'
export interface Cw20EscrowReadOnlyInterface {
  contractAddress: string
  list: () => Promise<ListResponse>
  detail: ({ id }: { id: string }) => Promise<DetailResponse>
}
export class Cw20EscrowQueryClient implements Cw20EscrowReadOnlyInterface {
  client: CosmWasmClient
  contractAddress: string

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client
    this.contractAddress = contractAddress
    this.list = this.list.bind(this)
    this.detail = this.detail.bind(this)
  }

  list = async (): Promise<ListResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      list: {},
    })
  }
  detail = async ({ id }: { id: string }): Promise<DetailResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      detail: {
        id,
      },
    })
  }
}
export interface Cw20EscrowInterface extends Cw20EscrowReadOnlyInterface {
  contractAddress: string
  sender: string
  create: (
    {
      arbiter,
      cw20Whitelist,
      description,
      endHeight,
      id,
      recipient,
      title,
    }: {
      arbiter: string
      cw20Whitelist?: string[]
      description: string
      endHeight?: number
      id: string
      recipient?: string
      title: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>
  topUp: (
    {
      id,
    }: {
      id: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>
  setReceipient: (
    {
      id,
      recipient,
    }: {
      id: string
      recipient: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>
  approve: (
    {
      id,
    }: {
      id: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>
  refund: (
    {
      id,
    }: {
      id: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>
  receive: (
    {
      amount,
      msg,
      sender,
    }: {
      amount: Uint128
      msg: Binary
      sender: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>
}
export class Cw20EscrowClient
  extends Cw20EscrowQueryClient
  implements Cw20EscrowInterface
{
  client: SigningCosmWasmClient
  sender: string
  contractAddress: string

  constructor(
    client: SigningCosmWasmClient,
    sender: string,
    contractAddress: string
  ) {
    super(client, contractAddress)
    this.client = client
    this.sender = sender
    this.contractAddress = contractAddress
    this.create = this.create.bind(this)
    this.topUp = this.topUp.bind(this)
    this.setReceipient = this.setReceipient.bind(this)
    this.approve = this.approve.bind(this)
    this.refund = this.refund.bind(this)
    this.receive = this.receive.bind(this)
  }

  create = async (
    {
      arbiter,
      cw20Whitelist,
      description,
      endHeight,
      id,
      recipient,
      title,
    }: {
      arbiter: string
      cw20Whitelist?: string[]
      description: string
      endHeight?: number
      id: string
      recipient?: string
      title: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        create: {
          arbiter,
          cw20_whitelist: cw20Whitelist,
          description,
          end_height: endHeight,
          id,
          recipient,
          title,
        },
      },
      fee,
      memo,
      funds
    )
  }
  topUp = async (
    {
      id,
    }: {
      id: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        top_up: {
          id,
        },
      },
      fee,
      memo,
      funds
    )
  }
  setReceipient = async (
    {
      id,
      recipient,
    }: {
      id: string
      recipient: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        set_receipient: {
          id,
          recipient,
        },
      },
      fee,
      memo,
      funds
    )
  }
  approve = async (
    {
      id,
    }: {
      id: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        approve: {
          id,
        },
      },
      fee,
      memo,
      funds
    )
  }
  refund = async (
    {
      id,
    }: {
      id: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        refund: {
          id,
        },
      },
      fee,
      memo,
      funds
    )
  }
  receive = async (
    {
      amount,
      msg,
      sender,
    }: {
      amount: Uint128
      msg: Binary
      sender: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        receive: {
          amount,
          msg,
          sender,
        },
      },
      fee,
      memo,
      funds
    )
  }
}
